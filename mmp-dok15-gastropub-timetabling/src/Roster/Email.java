package Roster;

/* Based on code from
https://www.w3schools.com/java/java_regex.asp
https://www.rexegg.com/regex-quickstart.html
*/

import java.io.Serializable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Represents the email of an employee.
 * Valid email formats are enforced.
*/
public class Email implements Serializable {
    private String email;

    public Email( String email ){
        this.email = email.toUpperCase();
    }

    // Autogenerated setters and getters
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    /** Checks if a String has a valid email format.
     * Valid format example: Abc12@Abc12.com and dok15@aber.ac.uk
     * @param emailToCheck A String instance containing a supposed email.
     * @return true if the String has a valid email format.
     * */
    public static boolean formatIsValid( String emailToCheck ){
        /* Encountered issue with trying to match . since . is special regex syntax.
        Tried escaping it with \. but \ is special Java syntax so did double escape.
         */
        Pattern patternShort = Pattern.compile( "^[a-z0-9._-]+@[a-z0-9]+\\.[a-z]+$", Pattern.CASE_INSENSITIVE );
        Matcher matcherShort = patternShort.matcher( emailToCheck );

        Pattern patternLong = Pattern.compile( "^[a-z0-9._-]+@[a-z0-9]+\\.[a-z]+\\.[a-z]+$", Pattern.CASE_INSENSITIVE );
        Matcher matcherLong = patternLong.matcher( emailToCheck );

        if( matcherShort.find() || matcherLong.find() )
            return true; // early exit / guarding

        return false;

    }

    @Override
    public boolean equals( Object o ){
        Email otherEmail = (Email) o;

        return( this.email.equalsIgnoreCase( otherEmail.getEmail() ) );
    }
}